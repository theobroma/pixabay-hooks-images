{"version":3,"sources":["@components/AppBar/AppBar.tsx","@store/pictures/selectors.ts","@components/ImageGallery/ImageGallery.tsx","@components/UI/LoadingPage/LoadingPage.tsx","@api/api.ts","@api/picture-api.ts","@store/pictures/slice.ts","#/App.tsx","@api/forecast-api.ts","@store/forecast/slice.ts","@api/currentWeather-api.ts","@store/current-weather/slice.ts","@api/search-api.ts","@store/search/slice.ts","@store/index.ts","configureStore.ts","@themes/theme.ts","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","root","marginTop","width","marginBottom","SimpleAppBar","props","classes","className","AppBar","position","color","Toolbar","Typography","variant","picturesSelector","state","pictures","theme","display","flexWrap","justifyContent","overflow","backgroundColor","palette","background","paper","gridList","height","transform","titleBar","icon","ImageGallery","picturesHits","useSelector","data","hits","useTheme","screenExtraLarge","useMediaQuery","breakpoints","only","screenLarge","screenMedium","screenSmall","GridList","cellHeight","cols","spacing","map","tile","GridListTile","rows","src","webformatURL","alt","GridListTileBar","title","titlePosition","actionIcon","IconButton","aria-label","actionPosition","id","backdrop","zIndex","drawer","LoadingPage","Backdrop","open","CircularProgress","API_KEY","instance","axios","create","baseURL","pictureAPI","pictureSearch","page","get","waitforme","milisec","Promise","resolve","setTimeout","picturesTC","createAsyncThunk","param","thunkAPI","a","dispatch","setLoading","res","rejectWithValue","response","slice","createSlice","name","initialState","loading","reducers","action","payload","incrementPage","extraReducers","builder","addCase","fulfilled","picturesReducer","reducer","actions","AppContainer","useDispatch","picturesLoading","useEffect","Container","maxWidth","Box","my","textAlign","Button","forecastAPI","days","lat","lon","getForecastTC","forecastday","forecast","forecastReducer","currentWeatherApi","getCurrentWeatherTC","undf","navigator","geolocation","getCurrentPosition","userCoordinatesAC","coords","latitude","longitude","setLocationAC","location","currentWeather","current","currentWeatherReducer","searchAPI","place","searchTC","clearData","searchReducer","rootReducer","combineReducers","search","logger","createLogger","collapsed","persistConfig","key","storage","whitelist","persistedReducer","persistReducer","middleware","getDefaultMiddleware","thunk","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","store","configureStore","devTools","persistor","persistStore","createMuiTheme","typography","fontFamily","fontSize","primary","light","main","dark","contrastText","secondary","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","rootEl","document","getElementById","render","StrictMode","ThemeProvider","CssBaseline"],"mappings":"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","file":"static/js/main.6153970c.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles, AppBar, Toolbar, Typography } from '@material-ui/core';\n\nconst useStyles = makeStyles({\n  root: {\n    marginTop: 0,\n    width: '100%',\n    marginBottom: 16,\n  },\n});\n\nexport const SimpleAppBar: React.FC = (props) => {\n  const classes = useStyles(props);\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\" color=\"primary\">\n        <Toolbar>\n          <Typography variant=\"h6\">Weather App</Typography>\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\n","import { RootState } from '..';\n\nexport const picturesSelector = (state: RootState) => {\n  return state.pictures;\n};\n","// Responsive approach https://www.tilcode.com/react-media-query-hook-responsive-material-ui-gridlist/\n// const ImageGallery = ({ picture, setImageData }) => {\n//   return (\n//     <ul className={s.ImageGallery}>\n//       {picture.map(({ webformatURL, largeImageURL, tags }, index) => (\n//         <ImageGalleryItem\n//           onSetImageData={setImageData}\n//           key={index}\n//           src={webformatURL}\n//           largeImageURL={largeImageURL}\n//           tags={tags}\n//         />\n//       ))}\n//     </ul>\n//   );\n// };\n// export default ImageGallery;\nimport * as React from 'react';\nimport {\n  GridList,\n  GridListTile,\n  GridListTileBar,\n  IconButton,\n  makeStyles,\n  Theme,\n  useMediaQuery,\n  useTheme,\n} from '@material-ui/core';\nimport { useSelector } from 'react-redux';\nimport StarBorderIcon from '@material-ui/icons/StarBorder';\nimport { picturesSelector } from '../../@store/pictures/selectors';\n// import ImageGalleryItem from './ImageGalleryItem';\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    justifyContent: 'space-around',\n    overflow: 'hidden',\n    backgroundColor: theme.palette.background.paper,\n  },\n  gridList: {\n    width: 'auto',\n    height: 'auto',\n    // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\n    transform: 'translateZ(0)',\n  },\n  titleBar: {\n    background:\n      'linear-gradient(to bottom, rgba(0,0,0,0.7) 0%, ' +\n      'rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)',\n  },\n  icon: {\n    color: 'white',\n  },\n}));\n\nexport const ImageGallery: React.FC = (props: any) => {\n  const picturesData = useSelector(picturesSelector).data;\n  const picturesHits = picturesData.hits;\n\n  const classes = useStyles();\n  const theme = useTheme();\n\n  //   RESPONSIVE HACK\n  const screenExtraLarge = useMediaQuery(theme.breakpoints.only('xl'));\n  const screenLarge = useMediaQuery(theme.breakpoints.only('lg'));\n  const screenMedium = useMediaQuery(theme.breakpoints.only('md'));\n  const screenSmall = useMediaQuery(theme.breakpoints.only('sm'));\n  const screenExtraSmall = useMediaQuery(theme.breakpoints.only('xs'));\n  const screenNarrow = useMediaQuery('(max-width:340px)');\n\n  const getScreenWidth = () => {\n    if (screenExtraLarge) {\n      return 5;\n    }\n    if (screenLarge) {\n      return 4;\n    }\n    if (screenMedium) {\n      return 3;\n    }\n    if (screenSmall) {\n      return 2;\n    }\n    if (screenExtraSmall) {\n      return 1;\n    }\n    if (screenNarrow) {\n      return 1;\n    }\n    return 1;\n  };\n  //   END of RESPONSIVE HACK\n\n  return (\n    <div className={classes.root}>\n      <GridList\n        cellHeight={260}\n        cols={getScreenWidth()}\n        spacing={1}\n        className={classes.gridList}\n      >\n        {picturesHits?.map((tile) => (\n          <GridListTile key={tile.id} cols={1} rows={1}>\n            <img src={tile.webformatURL} alt=\"none\" />\n            <GridListTileBar\n              title=\"title\"\n              titlePosition=\"top\"\n              actionIcon={\n                <IconButton aria-label=\"star title\" className={classes.icon}>\n                  <StarBorderIcon />\n                </IconButton>\n              }\n              actionPosition=\"left\"\n              className={classes.titleBar}\n            />\n          </GridListTile>\n        ))}\n      </GridList>\n    </div>\n  );\n};\n\nexport default ImageGallery;\n","import React from 'react';\nimport { CircularProgress, Backdrop, makeStyles } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => ({\n  backdrop: {\n    zIndex: theme.zIndex.drawer + 1,\n    color: '#fff',\n  },\n}));\n\nexport const LoadingPage: React.FC = () => {\n  const classes = useStyles();\n  return (\n    <Backdrop className={classes.backdrop} open>\n      <CircularProgress color=\"inherit\" />\n    </Backdrop>\n  );\n};\nexport default LoadingPage;\n","import axios from 'axios';\n\nexport const API_KEY = '21006895-bfaaa89652a3d7d5175478097';\n\nexport const instance = axios.create({\n  baseURL: 'https://pixabay.com/api',\n});\n","import { API_KEY, instance } from './api';\n\nexport const pictureAPI = {\n  fetchImages(pictureSearch: string, page: number) {\n    return instance.get(\n      `/?key=${API_KEY}&q=${pictureSearch}&image_type=photo&orientation=horizontal&per_page=12&page=${page}`,\n    );\n  },\n};\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { pictureAPI } from '../../@api/picture-api';\nimport { PicturesDataType } from '../../@types';\n\nconst picturesInitialState = {\n  data: {} as PicturesDataType,\n  loading: false,\n  page: 1,\n};\n\n// delay\nfunction waitforme(milisec: number) {\n  return new Promise((resolve) => {\n    setTimeout(() => {\n      resolve('');\n    }, milisec);\n  });\n}\n\nexport const picturesTC = createAsyncThunk(\n  'pictures/picturesTC',\n  async (param: { pictureSearch: string; page: number }, thunkAPI) => {\n    thunkAPI.dispatch(setLoading(true));\n    try {\n      await waitforme(2000);\n      const res = await pictureAPI.fetchImages(param.pictureSearch, param.page);\n      return { data: res.data };\n    } catch (err) {\n      return thunkAPI.rejectWithValue(err.response.data);\n    } finally {\n      thunkAPI.dispatch(setLoading(false));\n    }\n  },\n);\n\nexport const slice = createSlice({\n  name: 'pictures',\n  initialState: picturesInitialState,\n  reducers: {\n    setLoading(state, action) {\n      state.loading = action.payload;\n    },\n    incrementPage(state) {\n      state.page += 1;\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(picturesTC.fulfilled, (state, action) => {\n      if (action.payload) {\n        state.data = action.payload.data;\n      }\n    });\n  },\n});\n\nexport const picturesReducer = slice.reducer;\nexport const { setLoading } = slice.actions;\n","import { Box, Button, Container, Grid, Paper } from '@material-ui/core';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { SimpleAppBar } from '../@components/AppBar/AppBar';\nimport ImageGallery from '../@components/ImageGallery';\nimport LoadingPage from '../@components/UI/LoadingPage';\nimport { picturesSelector } from '../@store/pictures/selectors';\nimport { picturesTC } from '../@store/pictures/slice';\n\nexport const AppContainer: React.FC = () => {\n  const dispatch = useDispatch();\n  // const picturesLoading = useSelector(picturesSelector).loading;\n  const { loading: picturesLoading, page } = useSelector(picturesSelector);\n\n  useEffect(() => {\n    dispatch(picturesTC({ pictureSearch: '', page }));\n  }, [dispatch, page]);\n\n  return (\n    <div className=\"App\">\n      <SimpleAppBar />\n      <Container maxWidth=\"lg\">\n        {/* <Grid container spacing={1}>\n          <Grid item xs={12} md={6}>\n            <Paper elevation={3}>111</Paper>\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <Paper elevation={3}>222</Paper>\n          </Grid>\n        </Grid> */}\n        {picturesLoading && <LoadingPage />}\n        <ImageGallery />\n        <Box my={3} textAlign=\"center\">\n          <Button variant=\"contained\" color=\"primary\">\n            Load more\n          </Button>\n        </Box>\n      </Container>\n    </div>\n  );\n};\n","import {\n  LocationResponseType,\n  CurrentWeatherResponseType,\n  AstroResponseType,\n  DayResponseType,\n  HourResponseType,\n} from '../@types';\nimport { API_KEY, instance } from './api';\n\nexport const forecastAPI = {\n  dailyWeather(days: number, lat: number, lon: number) {\n    return instance.get<ForecastType>(\n      `/forecast.json?key=${API_KEY}&q=${lat},${lon}&days=${days}`,\n    );\n  },\n};\n\nexport type ForecastType = {\n  location: LocationResponseType;\n  current: CurrentWeatherResponseType;\n  forecast: ForecastDayInfoType;\n};\n\nexport type ForecastDayInfoType = {\n  forecastday: Array<ForecastdayResponseType>;\n};\n\nexport type ForecastdayResponseType = {\n  date: string;\n  day: DayResponseType;\n  astro: AstroResponseType;\n  hour: Array<HourResponseType>;\n};\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { forecastAPI, ForecastdayResponseType } from '../../@api/forecast-api';\n\nconst forecastInitialState = {\n  forecastday: [] as Array<ForecastdayResponseType>,\n};\n\nexport const getForecastTC = createAsyncThunk(\n  'forecast/getForecast',\n  async (param: { days: number; lat: number; lon: number }, thunkAPI) => {\n    try {\n      const res = await forecastAPI.dailyWeather(\n        param.days,\n        param.lat,\n        param.lon,\n      );\n      return { forecastday: res.data.forecast.forecastday };\n    } catch (err) {\n      // Use `err.response.data` as `action.payload` for a `rejected` action,\n      // by explicitly returning it using the `rejectWithValue()` utility\n      return thunkAPI.rejectWithValue(err.response.data);\n    }\n  },\n);\n\nexport const slice = createSlice({\n  name: 'forecast',\n  initialState: forecastInitialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(getForecastTC.fulfilled, (state, action) => {\n      if (action.payload) {\n        state.forecastday = action.payload.forecastday;\n      }\n    });\n  },\n});\n\nexport const forecastReducer = slice.reducer;\n","import { LocationResponseType, CurrentWeatherResponseType } from '../@types';\nimport { API_KEY, instance } from './api';\n\nexport const currentWeatherApi = {\n  currentWeather(lat: number, lon: number) {\n    return instance.get<CurrectWeatherType>(\n      `/current.json?key=${API_KEY}&q=${lat},${lon}`,\n    );\n  },\n};\n\nexport type CurrectWeatherType = {\n  location: LocationResponseType;\n  current: CurrentWeatherResponseType;\n};\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { currentWeatherApi } from '../../@api/currentWeather-api';\nimport { CurrentWeatherResponseType, LocationResponseType } from '../../@types';\n\nconst currentWeatherInitialState = {\n  lat: 0, // lat: 51.5341714,\n  lon: 0, // lon: 33.3767724,\n  location: {} as LocationResponseType,\n  currentWeather: {} as CurrentWeatherResponseType,\n};\n\nexport const getUserCoordinatesTC = createAsyncThunk(\n  'currentWeather/getUserCoordinatesTC',\n  (undf, thunkAPI) => {\n    navigator.geolocation.getCurrentPosition((position) => {\n      thunkAPI.dispatch(\n        userCoordinatesAC({\n          lat: position.coords.latitude,\n          lon: position.coords.longitude,\n        }),\n      );\n    });\n  },\n);\n\nexport const getCurrentWeatherTC = createAsyncThunk(\n  'currentWeather/getCurrentWeather',\n  async (param: { lat: number; lon: number }, thunkAPI) => {\n    try {\n      const res = await currentWeatherApi.currentWeather(param.lat, param.lon);\n      thunkAPI.dispatch(setLocationAC(res.data.location));\n      return { currentWeather: res.data.current };\n    } catch (err) {\n      // Use `err.response.data` as `action.payload` for a `rejected` action,\n      // by explicitly returning it using the `rejectWithValue()` utility\n      return thunkAPI.rejectWithValue(err.response.data);\n    }\n  },\n);\n\nexport const slice = createSlice({\n  name: 'currentWeather',\n  initialState: currentWeatherInitialState,\n  reducers: {\n    userCoordinatesAC(\n      state,\n      action: PayloadAction<{ lat: number; lon: number }>,\n    ) {\n      state.lat = action.payload.lat;\n      state.lon = action.payload.lon;\n    },\n    setLocationAC(state, action: PayloadAction<LocationResponseType>) {\n      state.location = action.payload;\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(getCurrentWeatherTC.fulfilled, (state, action) => {\n      if (action.payload) {\n        state.currentWeather = action.payload.currentWeather;\n      }\n    });\n  },\n});\n\nexport const currentWeatherReducer = slice.reducer;\nexport const { userCoordinatesAC, setLocationAC } = slice.actions;\n","import { searchPlaceResponseType } from '../@types';\nimport { API_KEY, instance } from './api';\n\nexport const searchAPI = {\n  place(place: string) {\n    return instance.get<searchPlaceResponseType[]>(\n      `/search.json?key=${API_KEY}&q=${place}`,\n    );\n  },\n};\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { searchAPI } from '../../@api/search-api';\nimport { searchPlaceResponseType } from '../../@types';\n\nconst searchInitialState = {\n  data: [] as Array<searchPlaceResponseType>,\n};\n\nexport const searchTC = createAsyncThunk(\n  'search/searchTC',\n  async (place: string, thunkAPI) => {\n    try {\n      const res = await searchAPI.place(place);\n      return { data: res.data };\n    } catch (err) {\n      return thunkAPI.rejectWithValue(err.response.data);\n    }\n  },\n);\n\nexport const slice = createSlice({\n  name: 'search',\n  initialState: searchInitialState,\n  reducers: {\n    clearData(state) {\n      state.data = [];\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(searchTC.fulfilled, (state, action) => {\n      if (action.payload) {\n        state.data = action.payload.data;\n      }\n    });\n  },\n});\n\nexport const searchReducer = slice.reducer;\nexport const { clearData: clearDataAC } = slice.actions;\n","import { combineReducers } from 'redux';\nimport { forecastReducer } from './forecast/slice';\nimport { currentWeatherReducer } from './current-weather/slice';\nimport { searchReducer } from './search/slice';\nimport { picturesReducer } from './pictures/slice';\n\nexport const rootReducer = combineReducers({\n  currentWeather: currentWeatherReducer,\n  forecast: forecastReducer,\n  pictures: picturesReducer,\n  search: searchReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\n// import { createBrowserHistory } from 'history';\nimport { createLogger } from 'redux-logger';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport { rootReducer } from './@store/index';\n// export const history = createBrowserHistory();\n\nconst logger = createLogger({\n  collapsed: true,\n});\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  // blacklist: ['filter'], // will not be persisted\n  whitelist: ['filter'], // will be persisted\n};\n\n// Middleware: Redux Persist Persisted Reducer\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\n// const middleware = [...getDefaultMiddleware(), logger];\n// https://github.com/rt2zz/redux-persist/issues/988#issuecomment-552242978\nconst middleware = [\n  ...getDefaultMiddleware({\n    // immutableCheck: true,\n    thunk: true,\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nexport const store = configureStore({\n  reducer: persistedReducer,\n  middleware,\n  // devTools: process.env.NODE_ENV === 'development',\n  devTools: true,\n});\n\nexport const persistor = persistStore(store);\nexport default { store, persistor };\n","import { createMuiTheme } from '@material-ui/core/styles';\n\nexport const theme = createMuiTheme({\n  typography: {\n    fontFamily: '\"Open Sans\", sans-serif',\n    fontSize: 14,\n    // fontWeightLight: 300,\n    // fontWeightRegular: 400,\n    // fontWeightMedium: 500,\n  },\n  palette: {\n    primary: {\n      light: '#757ce8',\n      main: '#3f50b5',\n      dark: '#002884',\n      contrastText: '#fff',\n    },\n    secondary: {\n      light: '#ff7961',\n      main: '#f44336',\n      dark: '#ba000d',\n      contrastText: '#000',\n    },\n  },\n});\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { CssBaseline, ThemeProvider } from '@material-ui/core';\nimport { AppContainer } from './#/App';\nimport { store, persistor } from './configureStore';\nimport LoadingPage from './@components/UI/LoadingPage';\nimport { theme } from './@themes/theme';\nimport reportWebVitals from './reportWebVitals';\n\n// All styles\nimport './@assets/styles/index.scss';\n\n// Open Source typefaces\nimport 'typeface-roboto';\n\nconst rootEl = document.getElementById('root');\n\nrender(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={<LoadingPage />} persistor={persistor}>\n        <ThemeProvider theme={theme}>\n          <CssBaseline />\n          <AppContainer />\n        </ThemeProvider>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  rootEl,\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}